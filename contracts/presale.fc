#include "imports/stdlib.fc";
#include "jetton/jetton-utils.fc";
#include "constants.fc";


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_bits() < 96) {
        return ();
    }

    context::op = in_msg_body~load_uint(32);
    context::query_id = in_msg_body~load_uint(64);
    (_, context::sender) = in_msg_full.begin_parse().skip_bits(4).load_msg_addr();

    load_data();

    if (context::op == op::deploy) {
        throw_unless(error::already_deployed, data::jetton_wallet.preload_uint(2) == 0);
        data::jetton_wallet = in_msg_body~load_msg_addr();
        save_data();
    }

    elseif (context::op == op::process_claim) {
        cell proof_cell = in_msg_body~load_ref();
        int index = in_msg_body~load_uint(256);

        (slice cs, int exotic?) = proof_cell.begin_parse_exotic();
        throw_unless(42, exotic?);
        throw_unless(43, cs~load_uint(8) == 3);
        throw_unless(44, data::merkle_root == cs~load_uint(256));

        cell dict = cs~load_ref();
        (slice entry, int found?) = dict.udict_get?(256, index);
        throw_unless(45, found?);

        throw_unless(error::wrong_sender, equal_slices(context::sender, helper_address(helper_stateinit(proof_cell.cell_hash(), index))));

        send_tokens(entry~load_msg_addr(), entry~load_coins());
    }
    elseif (context::op == 0xfa0102af){
        load_storage();
        int gas = 1000000000;
        throw_unless(450, msg_value > gas);
        int out = 0;
        int protocol_fee_out = 0;
        int extra_ton_out = 0;
        load_storage();
        int limit_amount = in_msg~load_coins();
        (out, protocol_fee_out, extra_ton_out) = get_amount_out(msg_value - gas, storage::reserve_ton, storage::reserve_token, 1);


    }

    ;;count ton amount from price
    (out, protocol_fee_out, extra_ton_out) = get_amount_out(msg_value - gas, storage::reserve_ton, storage::reserve_token, 0);
    cell payload = in_msg~load_ref();
    var ps = payload.begin_parse();
    ps~load_uint(32);
    int current_time = now();
    int limit_amount = ps~load_coins();
    if(( out <= limit_amount ) | (current_time <= storage::start_time)){
        cell payload = begin_cell()
            .store_uint(0,32)
            .store_coins(0)
            .store_slice("presale")
            .end_cell();
        send_jetton(msg_value, amount_jetton, query_id, from_user_address, storage::jetton_wallet_address, msg_value - gas, 0, payload);
        return();
    }

    else {
        throw(0xffff);
    }
}

